#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
# > ENTER MAGISK MODULE ID HERE
ID="terminal_debloater"

#=========================== Check root
echo "test root" > /data/local/tmp/temp 2>/dev/null >/dev/null
_name=$0; _name=${_name##*/}
[ $? -ne 0 ] && echo "$_name needs to be in a root shell!" && echo "type 'su' then '$_name'" && exit 1

#=========================== Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/cache/${ID}.log
# > Verbose output goes here
VERLOG=/cache/${ID}-verbose.log

#=========================== Start Logging verbosely
set -x 2>$VERLOG

#=========================== Determine if A/B OTA device
#ABDeviceCheck=$(cat /proc/cmdline | grep slot_suffix | wc -l)
if [ -d /system_root ]; then
  isABDevice=true
  SYSTEM=/system_root/system
  SYSTEM2=/system
else
  isABDevice=false
  SYSTEM=/system
  SYSTEM2=/system
fi

#=========================== Set Busybox (Used by Magisk) up
# > Do not touch!
set_busybox() {
  if [ -x "$1" ]; then
    for i in $(${1} --list); do
      if [ "$i" != 'echo' ]; then
        alias "$i"="${1} $i" 2>>$LOG >>$LOG
      fi
    done
    _busybox=true
    _bb=$1
  fi
}
if [ ! -x $SYSTEM/xbin/busybox ]; then
  _busybox=false
  set_busybox /data/magisk/busybox
  set_busybox /data/adb/magisk/busybox
  if [ -d /sbin/.core/busybox ]; then
    PATH=$PATH:/sbin/.core/busybox
    _busybox=true
  else
    alias busybox=""
  fi
fi
if [ -x $SYSTEM/xbin/busybox ]; then
  true
  _bb=$SYSTEM/xbin/busybox
elif [ -x $SYSTEM/bin/busybox ]; then
  true
  _bb=$SYSTEM/bin/busybox
elif [ -x /data/data/com.topjohnwu.magisk/busybox/busybox ]; then
  export PATH=$PATH:/data/data/com.topjohnwu.magisk/busybox
elif [ $_busybox ]; then
  true
else
  echo "! Busybox not detected.."
  echo "Please install one (@osm0sis' busybox recommended)"
  false
fi
[ $? -ne 0 ] && exit $?
_bbname=$(busybox | head -n1)
_bbname=${_bbname%'('*}
if [ "$_bbname" == "" ]; then
  _bbname="BusyBox not found!"
fi

#=========================== Default Functions

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
  sed -i "s/${1}=.*/${1}=${2}/g" $3
}

#=========================== Default Variables
# > Stuff here is used for some other stuff
# > Edit only if necessary!

# Magisk Mod Directory
MOUNTPATH=/magisk
if [ ! -d $MOUNTPATH ]; then
  if [ -d /sbin/.core/img ]; then
    MOUNTPATH=/sbin/.core/img
  fi
fi
MODDIR="$MOUNTPATH/$ID"
if [ ! -d $MODDIR ]; then
  if [ -d /sbin/.core/img/$ID ]; then
    MODDIR=/sbin/.core/img/$ID
  else
    echo "Module not detected!"
    exit 1
  fi
fi

# Import util_functions.sh
[ -f /data/adb/magisk/util_functions.sh ] && . /data/adb/magisk/util_functions.sh || exit 1

# Version Number
VER=$(grep_prop version $MODDIR/module.prop)
# Version Code
REL=$(grep_prop versionCode $MODDIR/module.prop)
# Author
AUTHOR=$(grep_prop author $MODDIR/module.prop)
# Mod Name/Title
MODTITLE=$(grep_prop name $MODDIR/module.prop)

# Colors
G='\e[01;32m'    # GREEN
R='\e[01;31m'    # RED
Y='\e[01;33m'    # YELLOW
B='\e[01;34m'    # BLUE
V='\e[01;35m'    # VIOLET
Bl='\e[01;30m'   # BLACK
C='\e[01;36m'    # CYAN
W='\e[01;37m'    # WHITE
N='\e[00;37;40m' # How to use (example): echo "${G}example${N}"

# Divider (based on $MODTITLE, $VER, and $REL characters)
div="${Bl}$(printf '%*s' "$(($(echo $MODTITLE | wc -c)+$(echo $VER | wc -c)+$(echo $REL | wc -c)))" '' | tr " " '=')${N}"

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.


# Terminal Debloater
# by veez21
clear
echo "$div"
echo "${W}$MODTITLE $VER${N}${Bl}($REL)${N}"
echo "by ${W}$AUTHOR${N}"
echo "$div"
echo "${W}$_bbname${N}"
echo "${Bl}$_bb${N}"
echo "$div"

show_rein=0
if [ -d $MODDIR$SYSTEM2/app ]; then
  for i in $MODDIR$SYSTEM2/app/*; do
    if [ -f $i/.replace ]; then
      show_rein=1
      break
    fi
  done
elif [ -d $MODDIR$SYSTEM2/priv-app ]; then
  for i in $MODDIR$SYSTEM2/priv-app/*; do
    if [ -f $i/.replace ]; then
      show_rein=1
      break
    fi
  done
fi

use_aapt=0
[[ "$(which aapt)" ]] && let use_aapt=1

get_app_name() {
  if [ -x $MODDIR/aapt ] || [ -x $SYSTEM/bin/aapt ] || [ -x $SYSTEM/xbin/aapt ] || [ $use_aapt == 1 ]; then
    export PATH=$MODDIR:$PATH
    app_name=$(aapt dump badging $1/${name[$2]}.apk | grep 'application-label:' 2>/dev/null)
    if [ $? -gt 0 ]; then
      app_name[$2]=${name[$2]}
      return
    fi
    app_name=${app_name#*:}
    app_name[$2]=$(echo $app_name | tr ' ' '_' | tr -d "'")
    app_label=$(aapt dump badging $1/${name[$2]}.apk | grep package | head -n1)
    app_label=${app_label#*"'"}
    app_label=${app_label%%"'"*}
    app_label[$2]=$app_label
  else
    app_name[$2]=${name[$2]}
  fi
}

list_system_app() {
  c=1
  x=1
  for i in $(ls $SYSTEM/app); do
    app[$x]=$SYSTEM/app/$i
    if [ ! -d $MODDIR${app[$x]} ]; then
      name[$x]=${i%/*}
      get_app_name ${app[$x]} $x
      c=$((c+1));x=$((x+1))
    fi
  done
}

list_system_priv-app() {
  c=1
  x=1
  for i in $(ls $SYSTEM/priv-app); do
    privapp[$x]=$SYSTEM/priv-app/$i
    if [ ! -d $MODDIR${privapp[$x]} ]; then
      name[$x]=${i%/*}
      get_app_name ${privapp[$x]} $x
      c=$((c+1));x=$((x+1))
    fi
  done
}

list_unin_app() {
  c=1
  if [ -d $SYSTEM/app ] && [ -d $MODDIR$SYSTEM2/app ]; then
    for i in $(ls $MODDIR$SYSTEM2/app); do
      unin_app[$c]=$MODDIR$SYSTEM2/app/$i
      name_unin[$c]=$(cat $MODDIR$SYSTEM2/app/$i/.replace)
      if [ $? -gt 0 ] || [ -z ${name_unin[$c]} ] || [[ ! $(cat $MODDIR$SYSTEM2/app/$i/.replace) ]]; then
        name_unin[$c]=$i
      fi
      echo " $c - ${W}${name_unin[$c]}${N}" | tr '_' ' '
      c=$((c+1))
    done
  fi
  if [ -d $SYSTEM/priv-app ] && [ -d $MODDIR$SYSTEM2/priv-app ]; then
    for i in $(ls $MODDIR$SYSTEM2/priv-app); do
      unin_app[$c]=$MODDIR$SYSTEM2/priv-app/$i
      name_unin[$c]=$(cat $MODDIR$SYSTEM2/priv-app/$i/.replace)
      if [ $? -gt 0 ] || [ -z ${name_unin[$c]} ] || [[ ! $(cat $MODDIR$SYSTEM2/priv-app/$i/.replace) ]]; then
        name_unin[$c]=$i
      fi
      echo " $c - ${W}${name_unin[$c]}${N}" | tr '_' ' '
      c=$((c+1))
    done
  fi
}

echo ""
if [ -d $SYSTEM/app ]; then
  echo " 1 - ${W}System Apps${N}"
fi
if [ -d $SYSTEM/priv-app ]; then
  echo " 2 - ${W}System Priv-Apps${N}"
fi
if [ $show_rein == 1 ]; then
  echo " 3 - ${W}Reinstall Uninstalled Apps${N}"
fi
echo " d - ${C}Donate${N}"
echo " 0 - ${Bl}Exit${N}"
echo ""
echo -n "[CHOICE]: "
read choice
if [ "$choice" == "1" ]; then
  if [ -d $SYSTEM/app ]; then
    clear
    echo "$div"
    echo "${W}System Apps${N}"
    echo "$div"
    echo ""
    echo "${W}Loading Apps...${N}"
    list_system_app 2>>$LOG
    c=1
    for i in $(seq 1 $((${#app_name[@]}-1))); do
      echo " $c - $(echo ${W}${app_name[$i]}${N} | tr '_' ' ')"
      c=$((c+1))
    done
    echo ""
    echo " m - ${R}Uninstall Multiple${N}"
    echo " 0 - ${Bl}Exit${N}"
    echo "$div"
    echo -n "[CHOICE]: "
    read app
    if [ "$app" == m ]; then
      echo "Choose numbers listed above."
      echo "Do not repeat the same number."
      echo " 0 - Proceed to Uninstall choices"
      echo -n " > "
      c=1
      while read app; do
        if [ "$app" == 0 ]; then
          break
        fi
        echo "Add to Queue: ${R}${app_name[$app]}${N}" | tr '_' ' '
        multiple[$c]=$MODDIR${app[$app]}
        choice[$c]=$app
        c=$((c+1))
        busybox printf " > "
      done
      if [ "${#multiple[@]}" == 0 ]; then
        echo "No app chosen"
        exit 1
      else
        c=1
        for i in ${multiple[@]}; do
          echo "Uninstalling ${R}${app_name[${choice[$c]}]}${N}" | tr '_' ' '
          mktouch $i/.replace ${app_name[${choice[$c]}]}
          if [ "${app_label[${choice[$c]}]}" ]; then
            data_apkdir=$(echo /data/app/${app_label[${choice[$c]}]}-*)
            if [ -d ${data_apkdir} ]; then
              rm -rf ${data_apkdir} 2>/dev/null
            fi
          fi
          sleep 0.5
          c=$((c+1))
        done
        exit
      fi
    elif [ "$app" -gt ${#app[@]} ] || [ "$app" -lt 0 ] || [ "$app" == "" ] || [ -n "$(echo $app | tr -d '0-9')" ] ; then
      echo "Invalid"
      exit 1
    elif [ "$app" == "0" ]; then
      exit
    else
      echo "Uninstalling ${R}${app_name[$app]}${N}" | tr '_' ' '
      sleep 1
      mktouch $MODDIR${app[$app]}/.replace ${app_name[$app]}
      if [ "${app_label[$app]}" ]; then
        data_apkdir=$(echo /data/app/${app_label[$app]}-*)
        if [ -d ${data_apkdir} ]; then
          rm -rf ${data_apkdir} 2>/dev/null
        fi
      fi
      echo "Reboot to apply changes"
      exit
    fi
  else
    echo Invalid
    exit 1
	fi
elif [ "$choice" == 2 ]; then
  if [ -d $SYSTEM/priv-app ]; then
    clear
    echo "$div"
    echo "${W}System Priv-Apps${N}"
    echo "$div"
    echo ""
    echo "${W}Loading Apps...${N}"
    list_system_priv-app 2>>$LOG
    c=1
    for i in $(seq 1 $((${#app_name[@]}-1))); do
      echo " $c - $(echo ${W}${app_name[$i]}${N} | tr '_' ' ')"
      c=$((c+1))
    done
    echo ""
    echo " m - ${R}Uninstall Multiple${N}"
    echo " 0 - ${Bl}Exit${N}"
    echo "$div"
    echo -n "[CHOICE]: "
    read privapp
    if [ "$privapp" == m ]; then
      echo "Choose numbers listed above."
      echo "Do not repeat the same number."
      echo " 0 - Proceed to Uninstall choices"
      echo -n " > "
      c=1
      while read app; do
        if [ "$app" == 0 ]; then
          break
        fi
        echo "Add to Queue: ${R}${app_name[$app]}${N}" | tr '_' ' '
        multiple[$c]=$MODDIR${privapp[$app]}
        choice[$c]=$app
        c=$((c+1))
        busybox printf " > "
      done
      if [ "${#multiple[@]}" == 0 ]; then
        echo "No app chosen"
        exit 1
      else
        c=1
        for i in ${multiple[@]}; do
          echo "Uninstalling ${R}${app_name[${choice[$c]}]}${N}" | tr '_' ' '
          mktouch $i/.replace ${app_name[${choice[$c]}]}
          if [ "${app_label[${choice[$c]}]}" ]; then
            data_apkdir=$(echo /data/app/${app_label[${choice[$c]}]}-*)
            if [ -d ${data_apkdir} ]; then
              rm -rf ${data_apkdir} 2>/dev/null
            fi
          fi
          sleep 0.5
          c=$((c+1))
        done
        exit
      fi
    elif [ "$privapp" -gt ${#privapp[@]} ] || [ "$privapp" -lt 0 ] || [ "$privapp" == "" ] || [ -n "$(echo $privapp | tr -d '0-9')" ] ; then
      echo "Invalid"
      exit 1
    elif [ "$privapp" == "0" ]; then
      exit
    else
      echo "Uninstalling ${R}${app_name[$privapp]}${N}" | tr '_' ' ' 
      sleep 1
      mktouch $MODDIR${privapp[$privapp]}/.replace ${app_name[$privapp]}
      if [ "${app_label[$privapp]}" ]; then
        data_apkdir=$(echo /data/app/${app_label[$privapp]}-*)
        if [ -d ${data_apkdir} ]; then
          rm -rf ${data_apkdir} 2>/dev/null
        fi
      fi
      echo "Reboot to apply changes"
      exit
    fi
  else
    echo Invalid
    exit 1
  fi
elif [ "$choice" == 3 ]; then
  if [ $show_rein == 1 ]; then
    clear
    echo "$div"
    echo "${W}Reinstall${N}"
    echo " The apps debloated were reset
 to their factory version"
    echo "$div"
    echo ""
    list_unin_app
    echo " 0 - ${Bl}Exit${N}"
    echo ""
    echo -n "[CHOICE]: "
    read rein
    if [ "$rein" -gt ${#name_unin[@]} ] || [ "$rein" -lt 0 ] || [ "$rein" == "" ] || [ -n "$(echo $rein | tr -d '0-9')" ] ; then
      echo "Invalid"
      exit 1
    elif [ "$rein" == "0" ]; then
      exit
    else
      echo "Reinstalling ${G}${name_unin[$rein]}${N}" | tr '_' ' '
      sleep 1
      rm -rf ${unin_app[$rein]}
      echo "Reboot to apply changes"
      exit
    fi
  else
    echo "Invalid"
    exit 1
  fi

elif [ "$choice" == "d" ] || [ "$choice" == "D" ]; then
  am start https://paypal.me/veez21 >/dev/null
elif [ "$choice" == "0" ]; then
  exit 
else echo Invalid
  exit 1
fi

exit $?
